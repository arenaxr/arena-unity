/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2023, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// These effects are enabled in desktop and XR views
    /// </summary>
    [Serializable]
    public class ArenaPostProcessingJson
    {
        public const string componentName = "post-processing";

        // post-processing member-fields

        private static object defBloom = JsonConvert.DeserializeObject("");
        [JsonProperty(PropertyName = "bloom")]
        [Tooltip("Use bloom post-processing effect")]
        public object Bloom = defBloom;
        public bool ShouldSerializeBloom()
        {
            if (_token != null && _token.SelectToken("bloom") != null) return true;
            return (Bloom != defBloom);
        }

        private static object defSao = JsonConvert.DeserializeObject("");
        [JsonProperty(PropertyName = "sao")]
        [Tooltip("Use scalable ambient occlusion (SAO) post-processing effect")]
        public object Sao = defSao;
        public bool ShouldSerializeSao()
        {
            if (_token != null && _token.SelectToken("sao") != null) return true;
            return (Sao != defSao);
        }

        private static object defSsao = JsonConvert.DeserializeObject("");
        [JsonProperty(PropertyName = "ssao")]
        [Tooltip("Use screen space ambient occlusion (SSAO) post-processing effect")]
        public object Ssao = defSsao;
        public bool ShouldSerializeSsao()
        {
            if (_token != null && _token.SelectToken("ssao") != null) return true;
            return (Ssao != defSsao);
        }

        private static object defPixel = JsonConvert.DeserializeObject("");
        [JsonProperty(PropertyName = "pixel")]
        [Tooltip("Use Pixelation post-processing effect")]
        public object Pixel = defPixel;
        public bool ShouldSerializePixel()
        {
            if (_token != null && _token.SelectToken("pixel") != null) return true;
            return (Pixel != defPixel);
        }

        private static object defGlitch = JsonConvert.DeserializeObject("");
        [JsonProperty(PropertyName = "glitch")]
        [Tooltip("Use Glitch post-processing effect")]
        public object Glitch = defGlitch;
        public bool ShouldSerializeGlitch()
        {
            if (_token != null && _token.SelectToken("glitch") != null) return true;
            return (Glitch != defGlitch);
        }

        private static object defFxaa = JsonConvert.DeserializeObject("");
        [JsonProperty(PropertyName = "fxaa")]
        [Tooltip("Use FXAA post-processing effect. You may want to place this last in effects list.")]
        public object Fxaa = defFxaa;
        public bool ShouldSerializeFxaa()
        {
            if (_token != null && _token.SelectToken("fxaa") != null) return true;
            return (Fxaa != defFxaa);
        }

        private static object defSmaa = JsonConvert.DeserializeObject("");
        [JsonProperty(PropertyName = "smaa")]
        [Tooltip("Use SMAA post-processing effect. You may want to place this last in effects list.")]
        public object Smaa = defSmaa;
        public bool ShouldSerializeSmaa()
        {
            if (_token != null && _token.SelectToken("smaa") != null) return true;
            return (Smaa != defSmaa);
        }

        // General json object management

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;

        private static JToken _token;

        public string SaveToString()
        {
            return Regex.Unescape(JsonConvert.SerializeObject(this));
        }

        public static ArenaPostProcessingJson CreateFromJSON(string jsonString, JToken token)
        {
            _token = token; // save updated wire json
            ArenaPostProcessingJson json = null;
            try {
                json = JsonConvert.DeserializeObject<ArenaPostProcessingJson>(Regex.Unescape(jsonString));
            } catch (JsonReaderException e)
            {
                Debug.LogWarning($"{e.Message}: {jsonString}");
            }
            return json;
        }
    }
}
