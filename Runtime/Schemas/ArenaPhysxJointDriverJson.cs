/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2024, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// Creates a driver which exerts force to return the joint to the initial position with the given velocity characteristics. Can only be used on an entity with a physx-joint component. Currently only supports D6 joint type. Requires `scene-options: physics`.
    /// </summary>
    [Serializable]
    public class ArenaPhysxJointDriverJson
    {
        [JsonIgnore]
        public readonly string componentName = "physx-joint-driver";

        // physx-joint-driver member-fields

        private static string[] defAxes = {  };
        [JsonProperty(PropertyName = "axes")]
        [Tooltip("Which axes the joint should operate on. Should be some combination of x, y, z, twist, swing.")]
        public string[] Axes = defAxes;
        public bool ShouldSerializeAxes()
        {
            // axes
            return (Axes != defAxes);
        }

        private static float defStiffness = 1f;
        [JsonProperty(PropertyName = "stiffness")]
        [Tooltip("How stiff the drive should be.")]
        public float Stiffness = defStiffness;
        public bool ShouldSerializeStiffness()
        {
            // stiffness
            return (Stiffness != defStiffness);
        }

        private static float defDamping = 1f;
        [JsonProperty(PropertyName = "damping")]
        [Tooltip("Damping to apply to the drive.")]
        public float Damping = defDamping;
        public bool ShouldSerializeDamping()
        {
            // damping
            return (Damping != defDamping);
        }

        private static float defForceLimit = 3.40282e+38f;
        [JsonProperty(PropertyName = "forceLimit")]
        [Tooltip("Maximum amount of force used to get to the target position.")]
        public float ForceLimit = defForceLimit;
        public bool ShouldSerializeForceLimit()
        {
            // forceLimit
            return (ForceLimit != defForceLimit);
        }

        private static bool defUseAcceleration = true;
        [JsonProperty(PropertyName = "useAcceleration")]
        [Tooltip("If true, will operate directly on body acceleration rather than on force.")]
        public bool UseAcceleration = defUseAcceleration;
        public bool ShouldSerializeUseAcceleration()
        {
            // useAcceleration
            return (UseAcceleration != defUseAcceleration);
        }

        private static ArenaVector3Json defLinearVelocity = JsonConvert.DeserializeObject<ArenaVector3Json>("{'x': 0, 'y': 0, 'z': 0}");
        [JsonProperty(PropertyName = "linearVelocity")]
        [Tooltip("Target linear velocity relative to the joint.")]
        public ArenaVector3Json LinearVelocity = defLinearVelocity;
        public bool ShouldSerializeLinearVelocity()
        {
            // linearVelocity
            return (LinearVelocity != defLinearVelocity);
        }

        private static ArenaVector3Json defAngularVelocity = JsonConvert.DeserializeObject<ArenaVector3Json>("{'x': 0, 'y': 0, 'z': 0}");
        [JsonProperty(PropertyName = "angularVelocity")]
        [Tooltip("Target angular velocity relative to the joint.")]
        public ArenaVector3Json AngularVelocity = defAngularVelocity;
        public bool ShouldSerializeAngularVelocity()
        {
            // angularVelocity
            return (AngularVelocity != defAngularVelocity);
        }

        private static bool defLockOtherAxes = false;
        [JsonProperty(PropertyName = "lockOtherAxes")]
        [Tooltip("If true, will automatically lock axes which are not being driven.")]
        public bool LockOtherAxes = defLockOtherAxes;
        public bool ShouldSerializeLockOtherAxes()
        {
            // lockOtherAxes
            return (LockOtherAxes != defLockOtherAxes);
        }

        private static bool defSlerpRotation = true;
        [JsonProperty(PropertyName = "slerpRotation")]
        [Tooltip("If true, uses SLERP rotation mode. If false, will use SWING mode.")]
        public bool SlerpRotation = defSlerpRotation;
        public bool ShouldSerializeSlerpRotation()
        {
            // slerpRotation
            return (SlerpRotation != defSlerpRotation);
        }

        // General json object management
        [OnError]
        internal void OnError(StreamingContext context, ErrorContext errorContext)
        {
            Debug.LogWarning($"{errorContext.Error.Message}: {errorContext.OriginalObject}");
            errorContext.Handled = true;
        }

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;
    }
}
