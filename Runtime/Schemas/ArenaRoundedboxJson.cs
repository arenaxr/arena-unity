/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2023, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// Rounded Box Geometry
    /// </summary>
    [Serializable]
    public class ArenaRoundedboxJson
    {
        public readonly string object_type = "roundedbox";

        // roundedbox member-fields

        private static float defDepth = 1f;
        [JsonProperty(PropertyName = "depth")]
        [Tooltip("depth")]
        public float Depth = defDepth;
        public bool ShouldSerializeDepth()
        {
            return true; // required in json schema
        }

        private static float defHeight = 1f;
        [JsonProperty(PropertyName = "height")]
        [Tooltip("height")]
        public float Height = defHeight;
        public bool ShouldSerializeHeight()
        {
            return true; // required in json schema
        }

        private static float defWidth = 1f;
        [JsonProperty(PropertyName = "width")]
        [Tooltip("width")]
        public float Width = defWidth;
        public bool ShouldSerializeWidth()
        {
            return true; // required in json schema
        }

        private static float defRadius = 0.15f;
        [JsonProperty(PropertyName = "radius")]
        [Tooltip("radius of edge")]
        public float Radius = defRadius;
        public bool ShouldSerializeRadius()
        {
            return true; // required in json schema
        }

        private static int defRadiusSegments = 10;
        [JsonProperty(PropertyName = "radiusSegments")]
        [Tooltip("segments radius")]
        public int RadiusSegments = defRadiusSegments;
        public bool ShouldSerializeRadiusSegments()
        {
            // radiusSegments
            return (RadiusSegments != defRadiusSegments);
        }

        // General json object management
        [OnError]
        internal void OnError(StreamingContext context, ErrorContext errorContext)
        {
            Debug.LogWarning($"{errorContext.Error.Message}: {errorContext.OriginalObject}");
            errorContext.Handled = true;
        }

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;
    }
}
