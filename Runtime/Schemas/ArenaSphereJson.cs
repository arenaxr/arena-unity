/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2023, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// Sphere Geometry
    /// </summary>
    [Serializable]
    public class ArenaSphereJson
    {
        public readonly string object_type = "sphere";

        // sphere member-fields

        private static float defPhiLength = 360f;
        [JsonProperty(PropertyName = "phiLength")]
        [Tooltip("phi length")]
        public float PhiLength = defPhiLength;
        public bool ShouldSerializePhiLength()
        {
            // phiLength
            return (PhiLength != defPhiLength);
        }

        private static float defPhiStart = 0f;
        [JsonProperty(PropertyName = "phiStart")]
        [Tooltip("phi start")]
        public float PhiStart = defPhiStart;
        public bool ShouldSerializePhiStart()
        {
            // phiStart
            return (PhiStart != defPhiStart);
        }

        private static float defRadius = 1f;
        [JsonProperty(PropertyName = "radius")]
        [Tooltip("radius")]
        public float Radius = defRadius;
        public bool ShouldSerializeRadius()
        {
            // radius
            return (Radius != defRadius);
        }

        private static int defSegmentsHeight = 18;
        [JsonProperty(PropertyName = "segmentsHeight")]
        [Tooltip("segments height")]
        public int SegmentsHeight = defSegmentsHeight;
        public bool ShouldSerializeSegmentsHeight()
        {
            // segmentsHeight
            return (SegmentsHeight != defSegmentsHeight);
        }

        private static int defSegmentsWidth = 36;
        [JsonProperty(PropertyName = "segmentsWidth")]
        [Tooltip("segments width")]
        public int SegmentsWidth = defSegmentsWidth;
        public bool ShouldSerializeSegmentsWidth()
        {
            // segmentsWidth
            return (SegmentsWidth != defSegmentsWidth);
        }

        private static float defThetaLength = 180f;
        [JsonProperty(PropertyName = "thetaLength")]
        [Tooltip("theta length")]
        public float ThetaLength = defThetaLength;
        public bool ShouldSerializeThetaLength()
        {
            // thetaLength
            return (ThetaLength != defThetaLength);
        }

        private static float defThetaStart = 0f;
        [JsonProperty(PropertyName = "thetaStart")]
        [Tooltip("theta start")]
        public float ThetaStart = defThetaStart;
        public bool ShouldSerializeThetaStart()
        {
            // thetaStart
            return (ThetaStart != defThetaStart);
        }

        // General json object management
        [OnError]
        internal void OnError(StreamingContext context, ErrorContext errorContext)
        {
            Debug.LogWarning($"{errorContext.Error.Message}: {errorContext.OriginalObject}");
            errorContext.Handled = true;
        }

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;
    }
}
