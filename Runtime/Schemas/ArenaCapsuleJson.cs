/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2023, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// Capsule Geometry
    /// </summary>
    [Serializable]
    public class ArenaCapsuleJson
    {
        public readonly string object_type = "capsule";

        // capsule member-fields

        private static float defLength = 1f;
        [JsonProperty(PropertyName = "length")]
        [Tooltip("length")]
        public float Length = defLength;
        public bool ShouldSerializeLength()
        {
            return true; // required in json schema
        }

        private static float defRadius = 1f;
        [JsonProperty(PropertyName = "radius")]
        [Tooltip("radius")]
        public float Radius = defRadius;
        public bool ShouldSerializeRadius()
        {
            return true; // required in json schema
        }

        private static int defSegmentsCap = 18;
        [JsonProperty(PropertyName = "segmentsCap")]
        [Tooltip("segments capsule")]
        public int SegmentsCap = defSegmentsCap;
        public bool ShouldSerializeSegmentsCap()
        {
            // segmentsCap
            return (SegmentsCap != defSegmentsCap);
        }

        private static int defSegmentsRadial = 36;
        [JsonProperty(PropertyName = "segmentsRadial")]
        [Tooltip("segments radial")]
        public int SegmentsRadial = defSegmentsRadial;
        public bool ShouldSerializeSegmentsRadial()
        {
            // segmentsRadial
            return (SegmentsRadial != defSegmentsRadial);
        }

        // General json object management
        [OnError]
        internal void OnError(StreamingContext context, ErrorContext errorContext)
        {
            Debug.LogWarning($"{errorContext.Error.Message}: {errorContext.OriginalObject}");
            errorContext.Handled = true;
        }

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;
    }
}
