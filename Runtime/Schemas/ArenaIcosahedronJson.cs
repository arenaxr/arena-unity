/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2023, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// icosahedron Geometry
    /// </summary>
    [Serializable]
    public class ArenaIcosahedronJson
    {
        public const string componentName = "icosahedron";

        // icosahedron member-fields

        private static float defDetail = 0f;
        [JsonProperty(PropertyName = "detail")]
        [Tooltip("detail")]
        public float Detail = defDetail;
        public bool ShouldSerializeDetail()
        {
            if (_token != null && _token.SelectToken("detail") != null) return true;
            return (Detail != defDetail);
        }

        private static float defRadius = 1f;
        [JsonProperty(PropertyName = "radius")]
        [Tooltip("radius")]
        public float Radius = defRadius;
        public bool ShouldSerializeRadius()
        {
            return true; // required in json schema 
        }

        // General json object management

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;

        private static JToken _token;

        public string SaveToString()
        {
            return Regex.Unescape(JsonConvert.SerializeObject(this));
        }

        public static ArenaIcosahedronJson CreateFromJSON(string jsonString, JToken token)
        {
            _token = token; // save updated wire json
            ArenaIcosahedronJson json = null;
            try {
                json = JsonConvert.DeserializeObject<ArenaIcosahedronJson>(Regex.Unescape(jsonString));
            } catch (JsonReaderException e)
            {
                Debug.LogWarning($"{e.Message}: {jsonString}");
            }
            return json;
        }
    }
}
