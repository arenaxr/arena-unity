/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2023, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// Ring Geometry
    /// </summary>
    [Serializable]
    public class ArenaRingJson
    {
        public readonly string object_type = "ring";

        // ring member-fields

        private static float defRadiusInner = 0.5f;
        [JsonProperty(PropertyName = "radiusInner")]
        [Tooltip("radius inner")]
        public float RadiusInner = defRadiusInner;
        public bool ShouldSerializeRadiusInner()
        {
            return true; // required in json schema
        }

        private static float defRadiusOuter = 1f;
        [JsonProperty(PropertyName = "radiusOuter")]
        [Tooltip("radius outer")]
        public float RadiusOuter = defRadiusOuter;
        public bool ShouldSerializeRadiusOuter()
        {
            return true; // required in json schema
        }

        private static int defSegmentsPhi = 10;
        [JsonProperty(PropertyName = "segmentsPhi")]
        [Tooltip("segments phi")]
        public int SegmentsPhi = defSegmentsPhi;
        public bool ShouldSerializeSegmentsPhi()
        {
            // segmentsPhi
            return (SegmentsPhi != defSegmentsPhi);
        }

        private static int defSegmentsTheta = 32;
        [JsonProperty(PropertyName = "segmentsTheta")]
        [Tooltip("segments theta")]
        public int SegmentsTheta = defSegmentsTheta;
        public bool ShouldSerializeSegmentsTheta()
        {
            // segmentsTheta
            return (SegmentsTheta != defSegmentsTheta);
        }

        private static float defThetaLength = 360f;
        [JsonProperty(PropertyName = "thetaLength")]
        [Tooltip("theta length")]
        public float ThetaLength = defThetaLength;
        public bool ShouldSerializeThetaLength()
        {
            // thetaLength
            return (ThetaLength != defThetaLength);
        }

        private static float defThetaStart = 0f;
        [JsonProperty(PropertyName = "thetaStart")]
        [Tooltip("theta start")]
        public float ThetaStart = defThetaStart;
        public bool ShouldSerializeThetaStart()
        {
            // thetaStart
            return (ThetaStart != defThetaStart);
        }

        // General json object management
        [OnError]
        internal void OnError(StreamingContext context, ErrorContext errorContext)
        {
            Debug.LogWarning($"{errorContext.Error.Message}: {errorContext.OriginalObject}");
            errorContext.Handled = true;
        }

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;
    }
}
