/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2023, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// Ring Geometry
    /// </summary>
    [Serializable]
    public class ArenaRingJson
    {
        public const string componentName = "ring";

        // ring member-fields

        private static float defRadiusInner = 0.5f;
        [JsonProperty(PropertyName = "radiusInner")]
        [Tooltip("radius inner")]
        public float RadiusInner = defRadiusInner;
        public bool ShouldSerializeRadiusInner()
        {
            return true; // required in json schema 
        }

        private static float defRadiusOuter = 1f;
        [JsonProperty(PropertyName = "radiusOuter")]
        [Tooltip("radius outer")]
        public float RadiusOuter = defRadiusOuter;
        public bool ShouldSerializeRadiusOuter()
        {
            return true; // required in json schema 
        }

        private static float defSegmentsPhi = 10f;
        [JsonProperty(PropertyName = "segmentsPhi")]
        [Tooltip("segments phi")]
        public float SegmentsPhi = defSegmentsPhi;
        public bool ShouldSerializeSegmentsPhi()
        {
            if (_token != null && _token.SelectToken("segmentsPhi") != null) return true;
            return (SegmentsPhi != defSegmentsPhi);
        }

        private static float defSegmentsTheta = 32f;
        [JsonProperty(PropertyName = "segmentsTheta")]
        [Tooltip("segments theta")]
        public float SegmentsTheta = defSegmentsTheta;
        public bool ShouldSerializeSegmentsTheta()
        {
            if (_token != null && _token.SelectToken("segmentsTheta") != null) return true;
            return (SegmentsTheta != defSegmentsTheta);
        }

        private static float defThetaLength = 360f;
        [JsonProperty(PropertyName = "thetaLength")]
        [Tooltip("theta length")]
        public float ThetaLength = defThetaLength;
        public bool ShouldSerializeThetaLength()
        {
            if (_token != null && _token.SelectToken("thetaLength") != null) return true;
            return (ThetaLength != defThetaLength);
        }

        private static float defThetaStart = 0f;
        [JsonProperty(PropertyName = "thetaStart")]
        [Tooltip("theta start")]
        public float ThetaStart = defThetaStart;
        public bool ShouldSerializeThetaStart()
        {
            if (_token != null && _token.SelectToken("thetaStart") != null) return true;
            return (ThetaStart != defThetaStart);
        }

        // General json object management

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;

        private static JToken _token;

        public string SaveToString()
        {
            return Regex.Unescape(JsonConvert.SerializeObject(this));
        }

        public static ArenaRingJson CreateFromJSON(string jsonString, JToken token)
        {
            _token = token; // save updated wire json
            ArenaRingJson json = null;
            try {
                json = JsonConvert.DeserializeObject<ArenaRingJson>(Regex.Unescape(jsonString));
            } catch (JsonReaderException e)
            {
                Debug.LogWarning($"{e.Message}: {jsonString}");
            }
            return json;
        }
    }
}
