/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2023, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// Cube (=Box) Geometry (deprecated); Supported for Legacy reasons; Please use Box in new scenes
    /// </summary>
    [Serializable]
    public class ArenaCubeJson
    {
        public readonly string object_type = "cube";

        // cube member-fields

        private static float defDepth = 1f;
        [JsonProperty(PropertyName = "depth")]
        [Tooltip("depth")]
        public float Depth = defDepth;
        public bool ShouldSerializeDepth()
        {
            // depth
            return (Depth != defDepth);
        }

        private static float defHeight = 1f;
        [JsonProperty(PropertyName = "height")]
        [Tooltip("height")]
        public float Height = defHeight;
        public bool ShouldSerializeHeight()
        {
            // height
            return (Height != defHeight);
        }

        private static int defSegmentsDepth = 1;
        [JsonProperty(PropertyName = "segmentsDepth")]
        [Tooltip("segments depth")]
        public int SegmentsDepth = defSegmentsDepth;
        public bool ShouldSerializeSegmentsDepth()
        {
            // segmentsDepth
            return (SegmentsDepth != defSegmentsDepth);
        }

        private static int defSegmentsHeight = 1;
        [JsonProperty(PropertyName = "segmentsHeight")]
        [Tooltip("segments height")]
        public int SegmentsHeight = defSegmentsHeight;
        public bool ShouldSerializeSegmentsHeight()
        {
            // segmentsHeight
            return (SegmentsHeight != defSegmentsHeight);
        }

        private static int defSegmentsWidth = 1;
        [JsonProperty(PropertyName = "segmentsWidth")]
        [Tooltip("segments width")]
        public int SegmentsWidth = defSegmentsWidth;
        public bool ShouldSerializeSegmentsWidth()
        {
            // segmentsWidth
            return (SegmentsWidth != defSegmentsWidth);
        }

        private static float defWidth = 1f;
        [JsonProperty(PropertyName = "width")]
        [Tooltip("width")]
        public float Width = defWidth;
        public bool ShouldSerializeWidth()
        {
            // width
            return (Width != defWidth);
        }

        // General json object management
        [OnError]
        internal void OnError(StreamingContext context, ErrorContext errorContext)
        {
            Debug.LogWarning($"{errorContext.Error.Message}: {errorContext.OriginalObject}");
            errorContext.Handled = true;
        }

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;
    }
}
