/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2023, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// Program
    /// </summary>
    [Serializable]
    public class ArenaArenaProgramJson
    {
        [JsonIgnore]
        public readonly string componentName = "arena-program";

        // arena-program member-fields

        private static string defName = "";
        [JsonProperty(PropertyName = "name")]
        [Tooltip("Name of the program in the format namespace/program-name")]
        public string Name = defName;
        public bool ShouldSerializeName()
        {
            return true; // required in json schema
        }

        public enum AffinityType
        {
            [EnumMember(Value = "client")]
            Client,
            [EnumMember(Value = "none")]
            None,
        }
        private static AffinityType defAffinity = AffinityType.Client;
        [JsonConverter(typeof(StringEnumConverter))]
        [JsonProperty(PropertyName = "affinity")]
        [Tooltip("Indicates the module affinity (client=client's runtime; none or empty=any suitable/available runtime)")]
        public AffinityType Affinity = defAffinity;
        public bool ShouldSerializeAffinity()
        {
            // affinity
            return (Affinity != defAffinity);
        }

        public enum InstantiateType
        {
            [EnumMember(Value = "single")]
            Single,
            [EnumMember(Value = "client")]
            Client,
        }
        private static InstantiateType defInstantiate = InstantiateType.Client;
        [JsonConverter(typeof(StringEnumConverter))]
        [JsonProperty(PropertyName = "instantiate")]
        [Tooltip("Single instance of the program (=single), or let every client create a program instance (=client). Per client instance will create new uuid for each program.")]
        public InstantiateType Instantiate = defInstantiate;
        public bool ShouldSerializeInstantiate()
        {
            return true; // required in json schema
        }

        private static string defFilename = "";
        [JsonProperty(PropertyName = "filename")]
        [Tooltip("Filename of the entry binary")]
        public string Filename = defFilename;
        public bool ShouldSerializeFilename()
        {
            return true; // required in json schema
        }

        public enum FiletypeType
        {
            [EnumMember(Value = "WA")]
            Wa,
            [EnumMember(Value = "PY")]
            Py,
        }
        private static FiletypeType defFiletype = FiletypeType.Wa;
        [JsonConverter(typeof(StringEnumConverter))]
        [JsonProperty(PropertyName = "filetype")]
        [Tooltip("Type of the program (WA=WASM or PY=Python)")]
        public FiletypeType Filetype = defFiletype;
        public bool ShouldSerializeFiletype()
        {
            return true; // required in json schema
        }

        private static string[] defArgs = { };
        [JsonProperty(PropertyName = "args")]
        [Tooltip("Command-line arguments (passed in argv). Supports variables: ${scene}, ${mqtth}, ${cameraid}, ${username}, ${runtimeid}, ${moduleid}, ${query-string-key}")]
        public string[] Args = defArgs;
        public bool ShouldSerializeArgs()
        {
            // args
            return (Args != defArgs);
        }

        private static string[] defEnv = {"MID=${moduleid}", "SCENE=${scene}", "NAMESPACE=${namespace}", "MQTTH=${mqtth}", "REALM=realm"};
        [JsonProperty(PropertyName = "env")]
        [Tooltip("Environment variables. Supports variables: ${scene}, ${namespace}, ${mqtth}, ${cameraid}, ${username}, ${runtimeid}, ${moduleid}, ${query-string-key}")]
        public string[] Env = defEnv;
        public bool ShouldSerializeEnv()
        {
            return true; // required in json schema
        }

        private static object[] defChannels = {JsonConvert.DeserializeObject("{'path': '/ch/${scene}', 'type': 'pubsub', 'mode': 'rw', 'params': {'topic': 'realm/s/${scene}'}}")};
        [JsonProperty(PropertyName = "channels")]
        [Tooltip("Channels describe files representing access to IO from pubsub and client sockets (possibly more in the future; currently only supported for WASM programs).")]
        public object[] Channels = defChannels;
        public bool ShouldSerializeChannels()
        {
            // channels
            return (Channels != defChannels);
        }

        // General json object management
        [OnError]
        internal void OnError(StreamingContext context, ErrorContext errorContext)
        {
            Debug.LogWarning($"{errorContext.Error.Message}: {errorContext.OriginalObject}");
            errorContext.Handled = true;
        }

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;
    }
}
