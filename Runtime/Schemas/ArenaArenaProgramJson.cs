/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2024, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// Program
    /// </summary>
    [Serializable]
    public class ArenaArenaProgramJson
    {
        [JsonIgnore]
        public readonly string componentName = "arena-program";

        // arena-program member-fields

        private static string defName = null;
        [JsonProperty(PropertyName = "name")]
        [Tooltip("Name of the program.")]
        public string Name = defName;
        public bool ShouldSerializeName()
        {
            return true; // required in json schema
        }

        public enum AffinityType
        {
            [EnumMember(Value = "client")]
            Client,
            [EnumMember(Value = "none")]
            None,
        }
        private static AffinityType defAffinity = AffinityType.Client;
        [JsonConverter(typeof(StringEnumConverter))]
        [JsonProperty(PropertyName = "affinity")]
        [Tooltip("Indicates the module affinity (client=client's runtime; none or empty=any suitable/available runtime).")]
        public AffinityType Affinity = defAffinity;
        public bool ShouldSerializeAffinity()
        {
            // affinity
            return (Affinity != defAffinity);
        }

        public enum InstantiateType
        {
            [EnumMember(Value = "single")]
            Single,
            [EnumMember(Value = "client")]
            Client,
        }
        private static InstantiateType defInstantiate = InstantiateType.Client;
        [JsonConverter(typeof(StringEnumConverter))]
        [JsonProperty(PropertyName = "instantiate")]
        [Tooltip("Single instance of the program (=single), or let every client create a program instance (=client). Per client instance will create new uuid for each program.")]
        public InstantiateType Instantiate = defInstantiate;
        public bool ShouldSerializeInstantiate()
        {
            return true; // required in json schema
        }

        private static string defFile = null;
        [JsonProperty(PropertyName = "file")]
        [Tooltip("The path to a `.wasm` file (e.g. `counter.wasm`, `user1/counter.wasm`) in the ARENA filestore, starting from the location field indicated below. See location. Example: user1/py/counter/counter.py should have file: `counter.py` and location: `user1/py/counter`. Note that the runtime will download all files in parent folder (e.g. you can add a requirements.txt)")]
        public string File = defFile;
        public bool ShouldSerializeFile()
        {
            return true; // required in json schema
        }

        private static string defFilename = null;
        [JsonProperty(PropertyName = "filename")]
        [Obsolete("DEPRECATED: data.filename is deprecated for type: program, use data.file and data.location instead.")]
        public string Filename { get; protected set; } = defFilename;
        public bool ShouldSerializeFilename()
        {
            return false; // deprecated in json schema
        }

        private static string defLocation = null;
        [JsonProperty(PropertyName = "location")]
        [Tooltip("Filestore path starting at user home; Example: `user1/hello` for a program inside folder `hello` of user1. Should, at least be the user filesore home folder.")]
        public string Location = defLocation;
        public bool ShouldSerializeLocation()
        {
            return true; // required in json schema
        }

        public enum FiletypeType
        {
            [EnumMember(Value = "WA")]
            Wa,
            [EnumMember(Value = "PY")]
            Py,
        }
        private static FiletypeType defFiletype = FiletypeType.Wa;
        [JsonConverter(typeof(StringEnumConverter))]
        [JsonProperty(PropertyName = "filetype")]
        [Tooltip("Type of the program (WA=WASM or PY=Python).")]
        public FiletypeType Filetype = defFiletype;
        public bool ShouldSerializeFiletype()
        {
            return true; // required in json schema
        }

        public enum ParentType
        {
            [EnumMember(Value = "arena-rt1")]
            ArenaRt1,
        }
        private static ParentType defParent = ParentType.ArenaRt1;
        [JsonConverter(typeof(StringEnumConverter))]
        [JsonProperty(PropertyName = "parent")]
        [Tooltip("Request the orchestrator to deploy to this runtime (can be a runtime name or UUID); Temporarily must be arena-rt1.")]
        public ParentType Parent = defParent;
        public bool ShouldSerializeParent()
        {
            return true; // required in json schema
        }

        private static string[] defArgs = null;
        [JsonProperty(PropertyName = "args")]
        [Tooltip("Command-line arguments (passed in argv). Supports variables: ${scene}, ${mqtth}, ${userid}, ${username}, ${runtimeid}, ${moduleid}, ${query-string-key}.")]
        public string[] Args = defArgs;
        public bool ShouldSerializeArgs()
        {
            // args
            return (Args != defArgs);
        }

        private static string[] defEnv = { "MID=${moduleid}", "SCENE=${scene}", "NAMESPACE=${namespace}", "MQTTH=${mqtth}", "REALM=realm" };
        [JsonProperty(PropertyName = "env")]
        [Tooltip("Environment variables. Supports variables: ${scene}, ${namespace}, ${mqtth}, ${userid}, ${username}, ${runtimeid}, ${moduleid}, ${query-string-key}.")]
        public string[] Env = defEnv;
        public bool ShouldSerializeEnv()
        {
            return true; // required in json schema
        }

        private static object[] defChannels = { JsonConvert.DeserializeObject("{'path': '/ch/${scene}', 'type': 'pubsub', 'mode': 'rw', 'params': {'topic': 'realm/s/${scene}/${namespace}'}}") };
        [JsonProperty(PropertyName = "channels")]
        [Tooltip("Channels describe files representing access to IO from pubsub and client sockets (possibly more in the future; currently only supported for WASM programs).")]
        public object[] Channels = defChannels;
        public bool ShouldSerializeChannels()
        {
            // channels
            return (Channels != defChannels);
        }

        private static ArenaRunInfoJson defRunInfo = null;
        [JsonProperty(PropertyName = "run_info")]
        [Tooltip("run_info")]
        public ArenaRunInfoJson RunInfo = defRunInfo;
        public bool ShouldSerializeRunInfo()
        {
            // run_info
            return (RunInfo != defRunInfo);
        }

        // General json object management
        [OnError]
        internal void OnError(StreamingContext context, ErrorContext errorContext)
        {
            Debug.LogWarning($"{errorContext.Error.Message}: {errorContext.OriginalObject}");
            errorContext.Handled = true;
        }

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;
    }
}
