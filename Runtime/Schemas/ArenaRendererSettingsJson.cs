/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2023, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// These settings are fed into three.js WebGLRenderer properties
    /// </summary>
    [Serializable]
    public class ArenaRendererSettingsJson
    {
        [JsonIgnore]
        public readonly string componentName = "renderer-settings";

        // renderer-settings member-fields

        private static bool defLocalClippingEnabled = false;
        [JsonProperty(PropertyName = "localClippingEnabled")]
        [Tooltip("Defines whether the renderer respects object-level clipping planes")]
        public bool LocalClippingEnabled = defLocalClippingEnabled;
        public bool ShouldSerializeLocalClippingEnabled()
        {
            // localClippingEnabled
            return (LocalClippingEnabled != defLocalClippingEnabled);
        }

        public enum OutputColorSpaceType
        {
            [EnumMember(Value = "SRGBColorSpace")]
            SrGBColorSpace,
            [EnumMember(Value = "LinearSRGBColorSpace")]
            LinearSRGBColorSpace,
            [EnumMember(Value = "DisplayP3ColorSpace")]
            DisplayP3colorSpace,
            [EnumMember(Value = "NoColorSpace")]
            NoColorSpace,
        }
        private static OutputColorSpaceType defOutputColorSpace = OutputColorSpaceType.SrGBColorSpace;
        [JsonConverter(typeof(StringEnumConverter))]
        [JsonProperty(PropertyName = "outputColorSpace")]
        [Tooltip("Defines the output color space of the renderer (three.js default is SRGBColorSpace)")]
        public OutputColorSpaceType OutputColorSpace = defOutputColorSpace;
        public bool ShouldSerializeOutputColorSpace()
        {
            return true; // required in json schema
        }

        private static bool defPhysicallyCorrectLights = false;
        [JsonProperty(PropertyName = "physicallyCorrectLights")]
        [Tooltip("Whether to use physically correct lighting mode.")]
        public bool PhysicallyCorrectLights = defPhysicallyCorrectLights;
        public bool ShouldSerializePhysicallyCorrectLights()
        {
            // physicallyCorrectLights
            return (PhysicallyCorrectLights != defPhysicallyCorrectLights);
        }

        private static bool defSortObjects = true;
        [JsonProperty(PropertyName = "sortObjects")]
        [Tooltip("Defines whether the renderer should sort objects")]
        public bool SortObjects = defSortObjects;
        public bool ShouldSerializeSortObjects()
        {
            // sortObjects
            return (SortObjects != defSortObjects);
        }

        // General json object management
        [OnError]
        internal void OnError(StreamingContext context, ErrorContext errorContext)
        {
            Debug.LogWarning($"{errorContext.Error.Message}: {errorContext.OriginalObject}");
            errorContext.Handled = true;
        }

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;
    }
}
