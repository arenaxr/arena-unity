/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2024, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics.
    /// </summary>
    [Serializable]
    public class ArenaImpulseJson
    {
        [JsonIgnore]
        public readonly string componentName = "impulse";

        // impulse member-fields

        private static ArenaVector3Json defForce = JsonConvert.DeserializeObject<ArenaVector3Json>("{'x': 1, 'y': 1, 'z': 1}");
        [JsonProperty(PropertyName = "force")]
        [Tooltip("Impulse vector.")]
        public ArenaVector3Json Force = defForce;
        public bool ShouldSerializeForce()
        {
            // force
            return (Force != defForce);
        }

        public enum OnType
        {
            [EnumMember(Value = "mousedown")]
            Mousedown,
            [EnumMember(Value = "mouseup")]
            Mouseup,
        }
        private static OnType defOn = OnType.Mousedown;
        [JsonConverter(typeof(StringEnumConverter))]
        [JsonProperty(PropertyName = "on")]
        [Tooltip("Event to listen 'on'.")]
        public OnType On = defOn;
        public bool ShouldSerializeOn()
        {
            // on
            return (On != defOn);
        }

        private static ArenaVector3Json defPosition = JsonConvert.DeserializeObject<ArenaVector3Json>("{'x': 1, 'y': 1, 'z': 1}");
        [JsonProperty(PropertyName = "position")]
        [Tooltip("World position.")]
        public ArenaVector3Json Position = defPosition;
        public bool ShouldSerializePosition()
        {
            // position
            return (Position != defPosition);
        }

        // General json object management
        [OnError]
        internal void OnError(StreamingContext context, ErrorContext errorContext)
        {
            Debug.LogWarning($"{errorContext.Error.Message}: {errorContext.OriginalObject}");
            errorContext.Handled = true;
        }

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;
    }
}
