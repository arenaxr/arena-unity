/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2023, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// The force applied using physics. Requires click-listener
    /// </summary>
    [Serializable]
    public class ArenaImpulseJson
    {
        [JsonIgnore]
        public readonly string componentName = "impulse";

        // impulse member-fields

        private static string defForce = "";
        [JsonProperty(PropertyName = "force")]
        [Tooltip("force")]
        public string Force = defForce;
        public bool ShouldSerializeForce()
        {
            // force
            return (Force != defForce);
        }

        private static string defOn = "";
        [JsonProperty(PropertyName = "on")]
        [Tooltip("on")]
        public string On = defOn;
        public bool ShouldSerializeOn()
        {
            // on
            return (On != defOn);
        }

        private static string defPosition = "";
        [JsonProperty(PropertyName = "position")]
        [Tooltip("position")]
        public string Position = defPosition;
        public bool ShouldSerializePosition()
        {
            // position
            return (Position != defPosition);
        }

        // General json object management
        [OnError]
        internal void OnError(StreamingContext context, ErrorContext errorContext)
        {
            Debug.LogWarning($"{errorContext.Error.Message}: {errorContext.OriginalObject}");
            errorContext.Handled = true;
        }

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;
    }
}
