/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2024, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// Load a 3D Gaussian Splat for Real-Time Radiance Field Rendering. More information: <a href='https://github.com/quadjr/aframe-gaussian-splatting'>A-Frame Gaussian Splatting</a>. See guidance to store paths under <a href='https://docs.arenaxr.org/content/interface/filestore.html'>ARENA File Store, CDN, or DropBox</a>.
    /// </summary>
    [Serializable]
    public class ArenaGaussianSplattingJson
    {
        public readonly string object_type = "gaussian_splatting";

        // gaussian_splatting member-fields

        private static string defSrc = null;
        [JsonProperty(PropertyName = "src")]
        [Tooltip("Use File Store paths under 'store/users/username', see CDN and other storage options in the description above.")]
        public string Src = defSrc;
        public bool ShouldSerializeSrc()
        {
            return true; // required in json schema
        }

        private static string defCutoutEntity = "";
        [JsonProperty(PropertyName = "cutoutEntity")]
        [Tooltip("Selector to a box primitive that uses scale and position to define the bounds of splat points to render.")]
        public string CutoutEntity = defCutoutEntity;
        public bool ShouldSerializeCutoutEntity()
        {
            // cutoutEntity
            return (CutoutEntity != defCutoutEntity);
        }

        private static float defPixelRatio = 1f;
        [JsonProperty(PropertyName = "pixelRatio")]
        [Tooltip("Pixel ratio for rendering. Reducing the value decreases the resolution and improves performance. If a negative value is set, the device's native value will be applied.")]
        public float PixelRatio = defPixelRatio;
        public bool ShouldSerializePixelRatio()
        {
            // pixelRatio
            return (PixelRatio != defPixelRatio);
        }

        private static float defXrPixelRatio = 0.5f;
        [JsonProperty(PropertyName = "xrPixelRatio")]
        [Tooltip("Same as pixelRatio. Applied to XR devices.")]
        public float XrPixelRatio = defXrPixelRatio;
        public bool ShouldSerializeXrPixelRatio()
        {
            // xrPixelRatio
            return (XrPixelRatio != defXrPixelRatio);
        }

        // General json object management
        [OnError]
        internal void OnError(StreamingContext context, ErrorContext errorContext)
        {
            Debug.LogWarning($"{errorContext.Error.Message}: {errorContext.OriginalObject}");
            errorContext.Handled = true;
        }

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;
    }
}
