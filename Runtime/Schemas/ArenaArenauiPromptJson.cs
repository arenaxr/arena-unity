/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2023, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// ARENAUI element which displays prompt with button actions.
    /// </summary>
    [Serializable]
    public class ArenaArenauiPromptJson
    {
        public readonly string object_type = "arenaui-prompt";

        // arenaui-prompt member-fields

        private static string defTitle = "Prompt";
        [JsonProperty(PropertyName = "title")]
        [Tooltip("Title")]
        public string Title = defTitle;
        public bool ShouldSerializeTitle()
        {
            return true; // required in json schema
        }

        private static string defDescription = "This is a prompt. Please confirm or cancel.";
        [JsonProperty(PropertyName = "description")]
        [Tooltip("Description")]
        public string Description = defDescription;
        public bool ShouldSerializeDescription()
        {
            // description
            return (Description != defDescription);
        }

        private static string[] defButtons = {"Confirm", "Cancel"};
        [JsonProperty(PropertyName = "buttons")]
        [Tooltip("Buttons")]
        public string[] Buttons = defButtons;
        public bool ShouldSerializeButtons()
        {
            return true; // required in json schema
        }

        private static float defWidth = 1.5f;
        [JsonProperty(PropertyName = "width")]
        [Tooltip("Override width")]
        public float Width = defWidth;
        public bool ShouldSerializeWidth()
        {
            return true; // required in json schema
        }

        public enum FontType
        {
            [EnumMember(Value = "Roboto")]
            Roboto,
            [EnumMember(Value = "Roboto-Mono")]
            RobotoMono,
        }
        private static FontType defFont = FontType.Roboto;
        [JsonConverter(typeof(StringEnumConverter))]
        [JsonProperty(PropertyName = "font")]
        [Tooltip("Font to use for button text")]
        public FontType Font = defFont;
        public bool ShouldSerializeFont()
        {
            // font
            return (Font != defFont);
        }

        // General json object management
        [OnError]
        internal void OnError(StreamingContext context, ErrorContext errorContext)
        {
            Debug.LogWarning($"{errorContext.Error.Message}: {errorContext.OriginalObject}");
            errorContext.Handled = true;
        }

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;
    }
}
