/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2023, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// Draw a line
    /// </summary>
    [Serializable]
    public class ArenaLineJson
    {
        public const string componentName = "line";

        // line member-fields

        private static object defEnd = JsonConvert.DeserializeObject("{'x': -0.5, 'y': -0.5, 'z': 0}");
        [JsonProperty(PropertyName = "end")]
        [Tooltip("vertex B (end)")]
        public object End = defEnd;
        public bool ShouldSerializeEnd()
        {
            return true; // required in json schema
        }

        private static float defOpacity = 1f;
        [JsonProperty(PropertyName = "opacity")]
        [Tooltip("Line Opacity")]
        public float Opacity = defOpacity;
        public bool ShouldSerializeOpacity()
        {
            if (_token != null && _token.SelectToken("opacity") != null) return true;
            return (Opacity != defOpacity);
        }

        private static object defStart = JsonConvert.DeserializeObject("{'x': 0, 'y': 0.5, 'z': 0}");
        [JsonProperty(PropertyName = "start")]
        [Tooltip("vertex A (start)")]
        public object Start = defStart;
        public bool ShouldSerializeStart()
        {
            return true; // required in json schema
        }

        private static bool defVisible = true;
        [JsonProperty(PropertyName = "visible")]
        [Tooltip("Visible")]
        public bool Visible = defVisible;
        public bool ShouldSerializeVisible()
        {
            if (_token != null && _token.SelectToken("visible") != null) return true;
            return (Visible != defVisible);
        }

        // General json object management

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;

        private static JToken _token;

        public string SaveToString()
        {
            return Regex.Unescape(JsonConvert.SerializeObject(this));
        }

        public static ArenaLineJson CreateFromJSON(string jsonString, JToken token)
        {
            _token = token; // save updated wire json
            ArenaLineJson json = null;
            try {
                json = JsonConvert.DeserializeObject<ArenaLineJson>(Regex.Unescape(jsonString));
            } catch (JsonReaderException e)
            {
                Debug.LogWarning($"{e.Message}: {jsonString}");
            }
            return json;
        }
    }
}
