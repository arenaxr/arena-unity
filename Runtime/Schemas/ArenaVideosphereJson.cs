/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2023, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// Videosphere Geometry
    /// </summary>
    [Serializable]
    public class ArenaVideosphereJson
    {
        public const string componentName = "videosphere";

        // videosphere member-fields

        private static bool defAutoplay = true;
        [JsonProperty(PropertyName = "autoplay")]
        [Tooltip("autoplay")]
        public bool Autoplay = defAutoplay;
        public bool ShouldSerializeAutoplay()
        {
            if (_token != null && _token.SelectToken("autoplay") != null) return true;
            return (Autoplay != defAutoplay);
        }

        private static string defCrossOrigin = "anonymous";
        [JsonProperty(PropertyName = "crossOrigin")]
        [Tooltip("crossOrigin")]
        public string CrossOrigin = defCrossOrigin;
        public bool ShouldSerializeCrossOrigin()
        {
            if (_token != null && _token.SelectToken("crossOrigin") != null) return true;
            return (CrossOrigin != defCrossOrigin);
        }

        private static bool defLoop = true;
        [JsonProperty(PropertyName = "loop")]
        [Tooltip("loop")]
        public bool Loop = defLoop;
        public bool ShouldSerializeLoop()
        {
            if (_token != null && _token.SelectToken("loop") != null) return true;
            return (Loop != defLoop);
        }

        private static float defRadius = 5000f;
        [JsonProperty(PropertyName = "radius")]
        [Tooltip("radius")]
        public float Radius = defRadius;
        public bool ShouldSerializeRadius()
        {
            if (_token != null && _token.SelectToken("radius") != null) return true;
            return (Radius != defRadius);
        }

        private static float defSegmentsHeight = 64f;
        [JsonProperty(PropertyName = "segmentsHeight")]
        [Tooltip("segments height")]
        public float SegmentsHeight = defSegmentsHeight;
        public bool ShouldSerializeSegmentsHeight()
        {
            if (_token != null && _token.SelectToken("segmentsHeight") != null) return true;
            return (SegmentsHeight != defSegmentsHeight);
        }

        private static float defSegmentsWidth = 64f;
        [JsonProperty(PropertyName = "segmentsWidth")]
        [Tooltip("segments width")]
        public float SegmentsWidth = defSegmentsWidth;
        public bool ShouldSerializeSegmentsWidth()
        {
            if (_token != null && _token.SelectToken("segmentsWidth") != null) return true;
            return (SegmentsWidth != defSegmentsWidth);
        }

        private static string defSrc = "";
        [JsonProperty(PropertyName = "src")]
        [Tooltip("URI, relative or full path of an image/video file. e.g. 'store/users/wiselab/images/360falls.mp4'")]
        public string Src = defSrc;
        public bool ShouldSerializeSrc()
        {
            if (_token != null && _token.SelectToken("src") != null) return true;
            return (Src != defSrc);
        }

        // General json object management

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;

        private static JToken _token;

        public string SaveToString()
        {
            return Regex.Unescape(JsonConvert.SerializeObject(this));
        }

        public static ArenaVideosphereJson CreateFromJSON(string jsonString, JToken token)
        {
            _token = token; // save updated wire json
            ArenaVideosphereJson json = null;
            try {
                json = JsonConvert.DeserializeObject<ArenaVideosphereJson>(Regex.Unescape(jsonString));
            } catch (JsonReaderException e)
            {
                Debug.LogWarning($"{e.Message}: {jsonString}");
            }
            return json;
        }
    }
}
