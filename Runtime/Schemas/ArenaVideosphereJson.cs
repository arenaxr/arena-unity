/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2024, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// Videosphere Geometry.
    /// </summary>
    [Serializable]
    public class ArenaVideosphereJson
    {
        public readonly string object_type = "videosphere";

        // videosphere member-fields

        private static bool defAutoplay = true;
        [JsonProperty(PropertyName = "autoplay")]
        [Tooltip("Autoplay")]
        public bool Autoplay = defAutoplay;
        public bool ShouldSerializeAutoplay()
        {
            // autoplay
            return (Autoplay != defAutoplay);
        }

        private static string defCrossOrigin = "anonymous";
        [JsonProperty(PropertyName = "crossOrigin")]
        [Tooltip("Cross Origin")]
        public string CrossOrigin = defCrossOrigin;
        public bool ShouldSerializeCrossOrigin()
        {
            // crossOrigin
            return (CrossOrigin != defCrossOrigin);
        }

        private static bool defLoop = true;
        [JsonProperty(PropertyName = "loop")]
        [Tooltip("Loop")]
        public bool Loop = defLoop;
        public bool ShouldSerializeLoop()
        {
            // loop
            return (Loop != defLoop);
        }

        private static float defRadius = 500f;
        [JsonProperty(PropertyName = "radius")]
        [Tooltip("Radius")]
        public float Radius = defRadius;
        public bool ShouldSerializeRadius()
        {
            return true; // required in json schema
        }

        private static int defSegmentsHeight = 32;
        [JsonProperty(PropertyName = "segmentsHeight")]
        [Tooltip("Segments Height")]
        public int SegmentsHeight = defSegmentsHeight;
        public bool ShouldSerializeSegmentsHeight()
        {
            // segmentsHeight
            return (SegmentsHeight != defSegmentsHeight);
        }

        private static int defSegmentsWidth = 64;
        [JsonProperty(PropertyName = "segmentsWidth")]
        [Tooltip("Segments Width")]
        public int SegmentsWidth = defSegmentsWidth;
        public bool ShouldSerializeSegmentsWidth()
        {
            // segmentsWidth
            return (SegmentsWidth != defSegmentsWidth);
        }

        private static string defSrc = null;
        [JsonProperty(PropertyName = "src")]
        [Tooltip("URI, relative or full path of an image/video file. e.g. 'store/users/wiselab/images/360falls.mp4'.")]
        public string Src = defSrc;
        public bool ShouldSerializeSrc()
        {
            // src
            return (Src != defSrc);
        }

        // General json object management
        [OnError]
        internal void OnError(StreamingContext context, ErrorContext errorContext)
        {
            Debug.LogWarning($"{errorContext.Error.Message}: {errorContext.OriginalObject}");
            errorContext.Handled = true;
        }

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;
    }
}
