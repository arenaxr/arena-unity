/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2023, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// Torus Knot Geometry
    /// </summary>
    [Serializable]
    public class ArenaTorusKnotJson
    {
        public const string componentName = "torusKnot";

        // torusKnot member-fields

        private static float defP = 2f;
        [JsonProperty(PropertyName = "p")]
        [Tooltip("P")]
        public float P = defP;
        public bool ShouldSerializeP()
        {
            if (_token != null && _token.SelectToken("p") != null) return true;
            return (P != defP);
        }

        private static float defQ = 3f;
        [JsonProperty(PropertyName = "q")]
        [Tooltip("Q")]
        public float Q = defQ;
        public bool ShouldSerializeQ()
        {
            if (_token != null && _token.SelectToken("q") != null) return true;
            return (Q != defQ);
        }

        private static float defRadius = 1f;
        [JsonProperty(PropertyName = "radius")]
        [Tooltip("radius")]
        public float Radius = defRadius;
        public bool ShouldSerializeRadius()
        {
            return true; // required in json schema 
        }

        private static float defRadiusTubular = 0.4f;
        [JsonProperty(PropertyName = "radiusTubular")]
        [Tooltip("radius tubular")]
        public float RadiusTubular = defRadiusTubular;
        public bool ShouldSerializeRadiusTubular()
        {
            if (_token != null && _token.SelectToken("radiusTubular") != null) return true;
            return (RadiusTubular != defRadiusTubular);
        }

        private static float defSegmentsRadial = 8f;
        [JsonProperty(PropertyName = "segmentsRadial")]
        [Tooltip("segments radial")]
        public float SegmentsRadial = defSegmentsRadial;
        public bool ShouldSerializeSegmentsRadial()
        {
            if (_token != null && _token.SelectToken("segmentsRadial") != null) return true;
            return (SegmentsRadial != defSegmentsRadial);
        }

        private static float defSegmentsTubular = 100f;
        [JsonProperty(PropertyName = "segmentsTubular")]
        [Tooltip("segments tubular")]
        public float SegmentsTubular = defSegmentsTubular;
        public bool ShouldSerializeSegmentsTubular()
        {
            if (_token != null && _token.SelectToken("segmentsTubular") != null) return true;
            return (SegmentsTubular != defSegmentsTubular);
        }

        // General json object management

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;

        private static JToken _token;

        public string SaveToString()
        {
            return Regex.Unescape(JsonConvert.SerializeObject(this));
        }

        public static ArenaTorusKnotJson CreateFromJSON(string jsonString, JToken token)
        {
            _token = token; // save updated wire json
            ArenaTorusKnotJson json = null;
            try {
                json = JsonConvert.DeserializeObject<ArenaTorusKnotJson>(Regex.Unescape(jsonString));
            } catch (JsonReaderException e)
            {
                Debug.LogWarning($"{e.Message}: {jsonString}");
            }
            return json;
        }
    }
}
