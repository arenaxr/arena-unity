/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2024, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// GPU based particle systems in A-Frame. More properties at <a href='https://github.com/harlyq/aframe-spe-particles-component'>A-Frame SPE Particles</a> component.
    /// </summary>
    [Serializable]
    public class ArenaSpeParticlesJson
    {
        [JsonIgnore]
        public readonly string componentName = "spe-particles";

        // spe-particles member-fields

        private static ArenaVector3Json defAcceleration = JsonConvert.DeserializeObject<ArenaVector3Json>("{'x': 0, 'y': 0, 'z': 0}");
        [JsonProperty(PropertyName = "acceleration")]
        [Tooltip("For sphere and disc distributions, only the x axis is used.")]
        public ArenaVector3Json Acceleration = defAcceleration;
        public bool ShouldSerializeAcceleration()
        {
            // acceleration
            return (Acceleration != defAcceleration);
        }

        public enum AccelerationDistributionType
        {
            [EnumMember(Value = "none")]
            None,
            [EnumMember(Value = "box")]
            Box,
            [EnumMember(Value = "sphere")]
            Sphere,
            [EnumMember(Value = "disc")]
            Disc,
        }
        private static AccelerationDistributionType defAccelerationDistribution = AccelerationDistributionType.None;
        [JsonConverter(typeof(StringEnumConverter))]
        [JsonProperty(PropertyName = "accelerationDistribution")]
        [Tooltip("Distribution of particle acceleration, for disc and sphere, only the x component will be used. if set to NONE use the 'distribution' attribute for accelerationDistribution.")]
        public AccelerationDistributionType AccelerationDistribution = defAccelerationDistribution;
        public bool ShouldSerializeAccelerationDistribution()
        {
            // accelerationDistribution
            return (AccelerationDistribution != defAccelerationDistribution);
        }

        private static ArenaVector3Json defAccelerationSpread = JsonConvert.DeserializeObject<ArenaVector3Json>("{'x': 0, 'y': 0, 'z': 0}");
        [JsonProperty(PropertyName = "accelerationSpread")]
        [Tooltip("Spread of the particle's acceleration. for sphere and disc distributions, only the x axis is used.")]
        public ArenaVector3Json AccelerationSpread = defAccelerationSpread;
        public bool ShouldSerializeAccelerationSpread()
        {
            // accelerationSpread
            return (AccelerationSpread != defAccelerationSpread);
        }

        private static float defActiveMultiplier = 1f;
        [JsonProperty(PropertyName = "activeMultiplier")]
        [Tooltip("Multiply the rate of particles emission, if larger than 1 then the particles will be emitted in bursts. note, very large numbers will emit all particles at once.")]
        public float ActiveMultiplier = defActiveMultiplier;
        public bool ShouldSerializeActiveMultiplier()
        {
            // activeMultiplier
            return (ActiveMultiplier != defActiveMultiplier);
        }

        private static bool defAffectedByFog = true;
        [JsonProperty(PropertyName = "affectedByFog")]
        [Tooltip("If true, the particles are affected by THREE js fog.")]
        public bool AffectedByFog = defAffectedByFog;
        public bool ShouldSerializeAffectedByFog()
        {
            // affectedByFog
            return (AffectedByFog != defAffectedByFog);
        }

        private static float defAlphaTest = 0f;
        [JsonProperty(PropertyName = "alphaTest")]
        [Tooltip("Alpha values below the alphaTest threshold are considered invisible.")]
        public float AlphaTest = defAlphaTest;
        public bool ShouldSerializeAlphaTest()
        {
            // alphaTest
            return (AlphaTest != defAlphaTest);
        }

        private static float?[] defAngle = { 0f };
        [JsonProperty(PropertyName = "angle")]
        [Tooltip("2D rotation of the particle over the particle's lifetime, max 4 elements.")]
        public float?[] Angle = defAngle;
        public bool ShouldSerializeAngle()
        {
            // angle
            return (Angle != defAngle);
        }

        private static float?[] defAngleSpread = { 0f };
        [JsonProperty(PropertyName = "angleSpread")]
        [Tooltip("Spread in angle over the particle's lifetime, max 4 elements.")]
        public float?[] AngleSpread = defAngleSpread;
        public bool ShouldSerializeAngleSpread()
        {
            // angleSpread
            return (AngleSpread != defAngleSpread);
        }

        public enum BlendingType
        {
            [EnumMember(Value = "no")]
            No,
            [EnumMember(Value = "normal")]
            Normal,
            [EnumMember(Value = "additive")]
            Additive,
            [EnumMember(Value = "subtractive")]
            Subtractive,
            [EnumMember(Value = "multiply")]
            Multiply,
            [EnumMember(Value = "custom")]
            Custom,
        }
        private static BlendingType defBlending = BlendingType.Normal;
        [JsonConverter(typeof(StringEnumConverter))]
        [JsonProperty(PropertyName = "blending")]
        [Tooltip("Blending mode, when drawing particles.")]
        public BlendingType Blending = defBlending;
        public bool ShouldSerializeBlending()
        {
            // blending
            return (Blending != defBlending);
        }

        private static string[] defColor = { "#fff" };
        [JsonProperty(PropertyName = "color")]
        [Tooltip("Array of colors over the particle's lifetime, max 4 elements.")]
        public string[] Color = defColor;
        public bool ShouldSerializeColor()
        {
            // color
            return (Color != defColor);
        }

        private static ArenaVector3Json[] defColorSpread = {  };
        [JsonProperty(PropertyName = "colorSpread")]
        [Tooltip("Spread to apply to colors, spread an array of vec3 (r g b) with 0 for no spread. note the spread will be re-applied through-out the lifetime of the particle.")]
        public ArenaVector3Json[] ColorSpread = defColorSpread;
        public bool ShouldSerializeColorSpread()
        {
            // colorSpread
            return (ColorSpread != defColorSpread);
        }

        private static bool defDepthTest = true;
        [JsonProperty(PropertyName = "depthTest")]
        [Tooltip("If true, don't render a particle's pixels if something is closer in the depth buffer.")]
        public bool DepthTest = defDepthTest;
        public bool ShouldSerializeDepthTest()
        {
            // depthTest
            return (DepthTest != defDepthTest);
        }

        private static bool defDepthWrite = false;
        [JsonProperty(PropertyName = "depthWrite")]
        [Tooltip("If true, particles write their depth into the depth buffer. this should be false if we use transparent particles.")]
        public bool DepthWrite = defDepthWrite;
        public bool ShouldSerializeDepthWrite()
        {
            // depthWrite
            return (DepthWrite != defDepthWrite);
        }

        public enum DirectionType
        {
            [EnumMember(Value = "forward")]
            Forward,
            [EnumMember(Value = "backward")]
            Backward,
        }
        private static DirectionType defDirection = DirectionType.Forward;
        [JsonConverter(typeof(StringEnumConverter))]
        [JsonProperty(PropertyName = "direction")]
        [Tooltip("Make the emitter operate forward or backward in time.")]
        public DirectionType Direction = defDirection;
        public bool ShouldSerializeDirection()
        {
            // direction
            return (Direction != defDirection);
        }

        public enum DistributionType
        {
            [EnumMember(Value = "box")]
            Box,
            [EnumMember(Value = "sphere")]
            Sphere,
            [EnumMember(Value = "disc")]
            Disc,
        }
        private static DistributionType defDistribution = DistributionType.Box;
        [JsonConverter(typeof(StringEnumConverter))]
        [JsonProperty(PropertyName = "distribution")]
        [Tooltip("Distribution for particle positions, velocities and acceleration. will be overridden by specific '...Distribution' attributes.")]
        public DistributionType Distribution = defDistribution;
        public bool ShouldSerializeDistribution()
        {
            // distribution
            return (Distribution != defDistribution);
        }

        private static float defDrag = 0f;
        [JsonProperty(PropertyName = "drag")]
        [Tooltip("Apply resistance to moving the particle, 0 is no resistance, 1 is full resistance, particle will stop moving at half of it's maxAge.")]
        public float Drag = defDrag;
        public bool ShouldSerializeDrag()
        {
            // drag
            return (Drag != defDrag);
        }

        private static float defDragSpread = 0f;
        [JsonProperty(PropertyName = "dragSpread")]
        [Tooltip("Spread to apply to the drag attribute.")]
        public float DragSpread = defDragSpread;
        public bool ShouldSerializeDragSpread()
        {
            // dragSpread
            return (DragSpread != defDragSpread);
        }

        private static float defDuration = -1f;
        [JsonProperty(PropertyName = "duration")]
        [Tooltip("Duration of the emitter (seconds), if less than 0 then continuously emit particles.")]
        public float Duration = defDuration;
        public bool ShouldSerializeDuration()
        {
            // duration
            return (Duration != defDuration);
        }

        private static float defEmitterScale = 100f;
        [JsonProperty(PropertyName = "emitterScale")]
        [Tooltip("Global scaling factor for all particles from the emitter.")]
        public float EmitterScale = defEmitterScale;
        public bool ShouldSerializeEmitterScale()
        {
            // emitterScale
            return (EmitterScale != defEmitterScale);
        }

        private static bool defEnableInEditor = false;
        [JsonProperty(PropertyName = "enableInEditor")]
        [Tooltip("Enable the emitter while the editor is active (i.e. while scene is paused).")]
        public bool EnableInEditor = defEnableInEditor;
        public bool ShouldSerializeEnableInEditor()
        {
            // enableInEditor
            return (EnableInEditor != defEnableInEditor);
        }

        private static bool defEnabled = true;
        [JsonProperty(PropertyName = "enabled")]
        [Tooltip("Enable/disable the emitter.")]
        public bool Enabled = defEnabled;
        public bool ShouldSerializeEnabled()
        {
            // enabled
            return (Enabled != defEnabled);
        }

        private static bool defFrustumCulled = false;
        [JsonProperty(PropertyName = "frustumCulled")]
        [Tooltip("Enable/disable frustum culling.")]
        public bool FrustumCulled = defFrustumCulled;
        public bool ShouldSerializeFrustumCulled()
        {
            // frustumCulled
            return (FrustumCulled != defFrustumCulled);
        }

        private static bool defHasPerspective = true;
        [JsonProperty(PropertyName = "hasPerspective")]
        [Tooltip("If true, particles will be larger the closer they are to the camera.")]
        public bool HasPerspective = defHasPerspective;
        public bool ShouldSerializeHasPerspective()
        {
            // hasPerspective
            return (HasPerspective != defHasPerspective);
        }

        private static float defMaxAge = 1f;
        [JsonProperty(PropertyName = "maxAge")]
        [Tooltip("Maximum age of a particle before reusing.")]
        public float MaxAge = defMaxAge;
        public bool ShouldSerializeMaxAge()
        {
            // maxAge
            return (MaxAge != defMaxAge);
        }

        private static float defMaxAgeSpread = 0f;
        [JsonProperty(PropertyName = "maxAgeSpread")]
        [Tooltip("Variance for the 'maxAge' attribute.")]
        public float MaxAgeSpread = defMaxAgeSpread;
        public bool ShouldSerializeMaxAgeSpread()
        {
            // maxAgeSpread
            return (MaxAgeSpread != defMaxAgeSpread);
        }

        private static float?[] defOpacity = { 1f };
        [JsonProperty(PropertyName = "opacity")]
        [Tooltip("Opacity over the particle's lifetime, max 4 elements.")]
        public float?[] Opacity = defOpacity;
        public bool ShouldSerializeOpacity()
        {
            // opacity
            return (Opacity != defOpacity);
        }

        private static float?[] defOpacitySpread = { 0f };
        [JsonProperty(PropertyName = "opacitySpread")]
        [Tooltip("Spread in opacity over the particle's lifetime, max 4 elements.")]
        public float?[] OpacitySpread = defOpacitySpread;
        public bool ShouldSerializeOpacitySpread()
        {
            // opacitySpread
            return (OpacitySpread != defOpacitySpread);
        }

        private static int defParticleCount = 100;
        [JsonProperty(PropertyName = "particleCount")]
        [Tooltip("Maximum number of particles for this emitter.")]
        public int ParticleCount = defParticleCount;
        public bool ShouldSerializeParticleCount()
        {
            // particleCount
            return (ParticleCount != defParticleCount);
        }

        public enum PositionDistributionType
        {
            [EnumMember(Value = "none")]
            None,
            [EnumMember(Value = "box")]
            Box,
            [EnumMember(Value = "sphere")]
            Sphere,
            [EnumMember(Value = "disc")]
            Disc,
        }
        private static PositionDistributionType defPositionDistribution = PositionDistributionType.None;
        [JsonConverter(typeof(StringEnumConverter))]
        [JsonProperty(PropertyName = "positionDistribution")]
        [Tooltip("Distribution of particle positions, disc and sphere will use the radius attributes. For box particles emit at 0,0,0, for sphere they emit on the surface of the sphere and for disc on the edge of a 2D disc on the XY plane.")]
        public PositionDistributionType PositionDistribution = defPositionDistribution;
        public bool ShouldSerializePositionDistribution()
        {
            // positionDistribution
            return (PositionDistribution != defPositionDistribution);
        }

        private static ArenaVector3Json defPositionOffset = JsonConvert.DeserializeObject<ArenaVector3Json>("{'x': 0, 'y': 0, 'z': 0}");
        [JsonProperty(PropertyName = "positionOffset")]
        [Tooltip("Fixed offset to the apply to the emitter relative to its parent entity.")]
        public ArenaVector3Json PositionOffset = defPositionOffset;
        public bool ShouldSerializePositionOffset()
        {
            // positionOffset
            return (PositionOffset != defPositionOffset);
        }

        private static ArenaVector3Json defPositionSpread = JsonConvert.DeserializeObject<ArenaVector3Json>("{'x': 0, 'y': 0, 'z': 0}");
        [JsonProperty(PropertyName = "positionSpread")]
        [Tooltip("Particles are positioned within +- of these local bounds. for sphere and disc distributions only the x axis is used.")]
        public ArenaVector3Json PositionSpread = defPositionSpread;
        public bool ShouldSerializePositionSpread()
        {
            // positionSpread
            return (PositionSpread != defPositionSpread);
        }

        private static float defRadius = 1f;
        [JsonProperty(PropertyName = "radius")]
        [Tooltip("Radius of the disc or sphere emitter (ignored for box). note radius of 0 will prevent velocity and acceleration if they use a sphere or disc distribution.")]
        public float Radius = defRadius;
        public bool ShouldSerializeRadius()
        {
            // radius
            return (Radius != defRadius);
        }

        private static ArenaVector3Json defRadiusScale = JsonConvert.DeserializeObject<ArenaVector3Json>("{'x': 1, 'y': 1, 'z': 1}");
        [JsonProperty(PropertyName = "radiusScale")]
        [Tooltip("Scales the emitter for sphere and disc shapes to form oblongs and ellipses.")]
        public ArenaVector3Json RadiusScale = defRadiusScale;
        public bool ShouldSerializeRadiusScale()
        {
            // radiusScale
            return (RadiusScale != defRadiusScale);
        }

        private static bool defRandomizeAcceleration = false;
        [JsonProperty(PropertyName = "randomizeAcceleration")]
        [Tooltip("If true, re-randomize acceleration when re-spawning a particle, can incur a performance hit.")]
        public bool RandomizeAcceleration = defRandomizeAcceleration;
        public bool ShouldSerializeRandomizeAcceleration()
        {
            // randomizeAcceleration
            return (RandomizeAcceleration != defRandomizeAcceleration);
        }

        private static bool defRandomizeAngle = false;
        [JsonProperty(PropertyName = "randomizeAngle")]
        [Tooltip("If true, re-randomize angle when re-spawning a particle, can incur a performance hit.")]
        public bool RandomizeAngle = defRandomizeAngle;
        public bool ShouldSerializeRandomizeAngle()
        {
            // randomizeAngle
            return (RandomizeAngle != defRandomizeAngle);
        }

        private static bool defRandomizeColor = false;
        [JsonProperty(PropertyName = "randomizeColor")]
        [Tooltip("If true, re-randomize colour when re-spawning a particle, can incur a performance hit.")]
        public bool RandomizeColor = defRandomizeColor;
        public bool ShouldSerializeRandomizeColor()
        {
            // randomizeColor
            return (RandomizeColor != defRandomizeColor);
        }

        private static bool defRandomizeDrag = false;
        [JsonProperty(PropertyName = "randomizeDrag")]
        [Tooltip("If true, re-randomize drag when re-spawning a particle, can incur a performance hit.")]
        public bool RandomizeDrag = defRandomizeDrag;
        public bool ShouldSerializeRandomizeDrag()
        {
            // randomizeDrag
            return (RandomizeDrag != defRandomizeDrag);
        }

        private static bool defRandomizeOpacity = false;
        [JsonProperty(PropertyName = "randomizeOpacity")]
        [Tooltip("If true, re-randomize opacity when re-spawning a particle, can incur a performance hit.")]
        public bool RandomizeOpacity = defRandomizeOpacity;
        public bool ShouldSerializeRandomizeOpacity()
        {
            // randomizeOpacity
            return (RandomizeOpacity != defRandomizeOpacity);
        }

        private static bool defRandomizePosition = false;
        [JsonProperty(PropertyName = "randomizePosition")]
        [Tooltip("If true, re-randomize position when re-spawning a particle, can incur a performance hit.")]
        public bool RandomizePosition = defRandomizePosition;
        public bool ShouldSerializeRandomizePosition()
        {
            // randomizePosition
            return (RandomizePosition != defRandomizePosition);
        }

        private static bool defRandomizeRotation = false;
        [JsonProperty(PropertyName = "randomizeRotation")]
        [Tooltip("If true, re-randomize rotation when re-spawning a particle, can incur a performance hit.")]
        public bool RandomizeRotation = defRandomizeRotation;
        public bool ShouldSerializeRandomizeRotation()
        {
            // randomizeRotation
            return (RandomizeRotation != defRandomizeRotation);
        }

        private static bool defRandomizeSize = false;
        [JsonProperty(PropertyName = "randomizeSize")]
        [Tooltip("If true, re-randomize size when re-spawning a particle, can incur a performance hit.")]
        public bool RandomizeSize = defRandomizeSize;
        public bool ShouldSerializeRandomizeSize()
        {
            // randomizeSize
            return (RandomizeSize != defRandomizeSize);
        }

        private static bool defRandomizeVelocity = false;
        [JsonProperty(PropertyName = "randomizeVelocity")]
        [Tooltip("If true, re-randomize velocity when re-spawning a particle, can incur a performance hit.")]
        public bool RandomizeVelocity = defRandomizeVelocity;
        public bool ShouldSerializeRandomizeVelocity()
        {
            // randomizeVelocity
            return (RandomizeVelocity != defRandomizeVelocity);
        }

        public enum RelativeType
        {
            [EnumMember(Value = "local")]
            Local,
            [EnumMember(Value = "world")]
            World,
        }
        private static RelativeType defRelative = RelativeType.Local;
        [JsonConverter(typeof(StringEnumConverter))]
        [JsonProperty(PropertyName = "relative")]
        [Tooltip("World relative particles move relative to the world, while local particles move relative to the emitter (i.e. if the emitter moves, all particles move with it).")]
        public RelativeType Relative = defRelative;
        public bool ShouldSerializeRelative()
        {
            // relative
            return (Relative != defRelative);
        }

        private static float defRotation = 0f;
        [JsonProperty(PropertyName = "rotation")]
        [Tooltip("Rotation in degrees.")]
        public float Rotation = defRotation;
        public bool ShouldSerializeRotation()
        {
            // rotation
            return (Rotation != defRotation);
        }

        private static ArenaVector3Json defRotationAxis = JsonConvert.DeserializeObject<ArenaVector3Json>("{'x': 0, 'y': 0, 'z': 0}");
        [JsonProperty(PropertyName = "rotationAxis")]
        [Tooltip("Local axis when using rotation.")]
        public ArenaVector3Json RotationAxis = defRotationAxis;
        public bool ShouldSerializeRotationAxis()
        {
            // rotationAxis
            return (RotationAxis != defRotationAxis);
        }

        private static ArenaVector3Json defRotationAxisSpread = JsonConvert.DeserializeObject<ArenaVector3Json>("{'x': 0, 'y': 0, 'z': 0}");
        [JsonProperty(PropertyName = "rotationAxisSpread")]
        [Tooltip("Variance in the axis of rotation.")]
        public ArenaVector3Json RotationAxisSpread = defRotationAxisSpread;
        public bool ShouldSerializeRotationAxisSpread()
        {
            // rotationAxisSpread
            return (RotationAxisSpread != defRotationAxisSpread);
        }

        private static float defRotationSpread = 0f;
        [JsonProperty(PropertyName = "rotationSpread")]
        [Tooltip("Rotation variance in degrees.")]
        public float RotationSpread = defRotationSpread;
        public bool ShouldSerializeRotationSpread()
        {
            // rotationSpread
            return (RotationSpread != defRotationSpread);
        }

        private static bool defRotationStatic = false;
        [JsonProperty(PropertyName = "rotationStatic")]
        [Tooltip("If true, the particles are fixed at their initial rotation value. if false, the particle will rotate from 0 to the 'rotation' value.")]
        public bool RotationStatic = defRotationStatic;
        public bool ShouldSerializeRotationStatic()
        {
            // rotationStatic
            return (RotationStatic != defRotationStatic);
        }

        private static float?[] defSize = { 1f };
        [JsonProperty(PropertyName = "size")]
        [Tooltip("Array of sizes over the particle's lifetime, max 4 elements.")]
        public float?[] Size = defSize;
        public bool ShouldSerializeSize()
        {
            // size
            return (Size != defSize);
        }

        private static float?[] defSizeSpread = { 0f };
        [JsonProperty(PropertyName = "sizeSpread")]
        [Tooltip("Spread in size over the particle's lifetime, max 4 elements.")]
        public float?[] SizeSpread = defSizeSpread;
        public bool ShouldSerializeSizeSpread()
        {
            // sizeSpread
            return (SizeSpread != defSizeSpread);
        }

        private static string defTexture = "";
        [JsonProperty(PropertyName = "texture")]
        [Tooltip("Texture to be used for each particle, may be a spritesheet. Examples: [blob.png, fog.png, square.png, explosion_sheet.png, fireworks_sheet.png], like path 'static/images/textures/blob.png'.")]
        public string Texture = defTexture;
        public bool ShouldSerializeTexture()
        {
            // texture
            return (Texture != defTexture);
        }

        private static int defTextureFrameCount = -1;
        [JsonProperty(PropertyName = "textureFrameCount")]
        [Tooltip("Number of frames in the spritesheet, negative numbers default to textureFrames.x * textureFrames.y.")]
        public int TextureFrameCount = defTextureFrameCount;
        public bool ShouldSerializeTextureFrameCount()
        {
            // textureFrameCount
            return (TextureFrameCount != defTextureFrameCount);
        }

        private static int defTextureFrameLoop = 1;
        [JsonProperty(PropertyName = "textureFrameLoop")]
        [Tooltip("Number of times the spritesheet should be looped over the lifetime of a particle.")]
        public int TextureFrameLoop = defTextureFrameLoop;
        public bool ShouldSerializeTextureFrameLoop()
        {
            // textureFrameLoop
            return (TextureFrameLoop != defTextureFrameLoop);
        }

        private static ArenaVector2Json defTextureFrames = JsonConvert.DeserializeObject<ArenaVector2Json>("{'x': 1, 'y': 1}");
        [JsonProperty(PropertyName = "textureFrames")]
        [Tooltip("X and Y frames for a spritesheet. each particle will transition through every frame of the spritesheet over its lifetime (see textureFramesLoop).")]
        public ArenaVector2Json TextureFrames = defTextureFrames;
        public bool ShouldSerializeTextureFrames()
        {
            // textureFrames
            return (TextureFrames != defTextureFrames);
        }

        private static bool defUseTransparency = true;
        [JsonProperty(PropertyName = "useTransparency")]
        [Tooltip("Should the particles be rendered with transparency?")]
        public bool UseTransparency = defUseTransparency;
        public bool ShouldSerializeUseTransparency()
        {
            // useTransparency
            return (UseTransparency != defUseTransparency);
        }

        private static ArenaVector3Json defVelocity = JsonConvert.DeserializeObject<ArenaVector3Json>("{'x': 0, 'y': 0, 'z': 0}");
        [JsonProperty(PropertyName = "velocity")]
        [Tooltip("For sphere and disc distributions, only the x axis is used.")]
        public ArenaVector3Json Velocity = defVelocity;
        public bool ShouldSerializeVelocity()
        {
            // velocity
            return (Velocity != defVelocity);
        }

        public enum VelocityDistributionType
        {
            [EnumMember(Value = "none")]
            None,
            [EnumMember(Value = "box")]
            Box,
            [EnumMember(Value = "sphere")]
            Sphere,
            [EnumMember(Value = "disc")]
            Disc,
        }
        private static VelocityDistributionType defVelocityDistribution = VelocityDistributionType.None;
        [JsonConverter(typeof(StringEnumConverter))]
        [JsonProperty(PropertyName = "velocityDistribution")]
        [Tooltip("Distribution of particle velocities, for disc and sphere, only the x component will be used. if set to NONE use the 'distribution' attribute for velocityDistribution.")]
        public VelocityDistributionType VelocityDistribution = defVelocityDistribution;
        public bool ShouldSerializeVelocityDistribution()
        {
            // velocityDistribution
            return (VelocityDistribution != defVelocityDistribution);
        }

        private static ArenaVector3Json defVelocitySpread = JsonConvert.DeserializeObject<ArenaVector3Json>("{'x': 0, 'y': 0, 'z': 0}");
        [JsonProperty(PropertyName = "velocitySpread")]
        [Tooltip("Variance for the velocity.")]
        public ArenaVector3Json VelocitySpread = defVelocitySpread;
        public bool ShouldSerializeVelocitySpread()
        {
            // velocitySpread
            return (VelocitySpread != defVelocitySpread);
        }

        private static float defWiggle = 0f;
        [JsonProperty(PropertyName = "wiggle")]
        [Tooltip("Extra distance the particle moves over its lifetime.")]
        public float Wiggle = defWiggle;
        public bool ShouldSerializeWiggle()
        {
            // wiggle
            return (Wiggle != defWiggle);
        }

        private static float defWiggleSpread = 0f;
        [JsonProperty(PropertyName = "wiggleSpread")]
        [Tooltip("+- spread for the wiggle attribute.")]
        public float WiggleSpread = defWiggleSpread;
        public bool ShouldSerializeWiggleSpread()
        {
            // wiggleSpread
            return (WiggleSpread != defWiggleSpread);
        }

        // General json object management
        [OnError]
        internal void OnError(StreamingContext context, ErrorContext errorContext)
        {
            Debug.LogWarning($"{errorContext.Error.Message}: {errorContext.OriginalObject}");
            errorContext.Handled = true;
        }

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;
    }
}
