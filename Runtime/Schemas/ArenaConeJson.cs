/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2023, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// Cone Geometry
    /// </summary>
    [Serializable]
    public class ArenaConeJson
    {
        public const string componentName = "cone";

        // cone member-fields

        private static float defHeight = 1f;
        [JsonProperty(PropertyName = "height")]
        [Tooltip("height")]
        public float Height = defHeight;
        public bool ShouldSerializeHeight()
        {
            return true; // required in json schema 
        }

        private static bool defOpenEnded = false;
        [JsonProperty(PropertyName = "openEnded")]
        [Tooltip("open ended")]
        public bool OpenEnded = defOpenEnded;
        public bool ShouldSerializeOpenEnded()
        {
            if (_token != null && _token.SelectToken("openEnded") != null) return true;
            return (OpenEnded != defOpenEnded);
        }

        private static float defRadiusBottom = 1f;
        [JsonProperty(PropertyName = "radiusBottom")]
        [Tooltip("radius bottom")]
        public float RadiusBottom = defRadiusBottom;
        public bool ShouldSerializeRadiusBottom()
        {
            return true; // required in json schema 
        }

        private static float defRadiusTop = 0.01f;
        [JsonProperty(PropertyName = "radiusTop")]
        [Tooltip("radius top")]
        public float RadiusTop = defRadiusTop;
        public bool ShouldSerializeRadiusTop()
        {
            if (_token != null && _token.SelectToken("radiusTop") != null) return true;
            return (RadiusTop != defRadiusTop);
        }

        private static float defSegmentsHeight = 18f;
        [JsonProperty(PropertyName = "segmentsHeight")]
        [Tooltip("segments height")]
        public float SegmentsHeight = defSegmentsHeight;
        public bool ShouldSerializeSegmentsHeight()
        {
            if (_token != null && _token.SelectToken("segmentsHeight") != null) return true;
            return (SegmentsHeight != defSegmentsHeight);
        }

        private static float defSegmentsRadial = 36f;
        [JsonProperty(PropertyName = "segmentsRadial")]
        [Tooltip("segments radial")]
        public float SegmentsRadial = defSegmentsRadial;
        public bool ShouldSerializeSegmentsRadial()
        {
            if (_token != null && _token.SelectToken("segmentsRadial") != null) return true;
            return (SegmentsRadial != defSegmentsRadial);
        }

        private static float defThetaLength = 360f;
        [JsonProperty(PropertyName = "thetaLength")]
        [Tooltip("theta length")]
        public float ThetaLength = defThetaLength;
        public bool ShouldSerializeThetaLength()
        {
            if (_token != null && _token.SelectToken("thetaLength") != null) return true;
            return (ThetaLength != defThetaLength);
        }

        private static float defThetaStart = 0f;
        [JsonProperty(PropertyName = "thetaStart")]
        [Tooltip("theta start")]
        public float ThetaStart = defThetaStart;
        public bool ShouldSerializeThetaStart()
        {
            if (_token != null && _token.SelectToken("thetaStart") != null) return true;
            return (ThetaStart != defThetaStart);
        }

        // General json object management

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;

        private static JToken _token;

        public string SaveToString()
        {
            return Regex.Unescape(JsonConvert.SerializeObject(this));
        }

        public static ArenaConeJson CreateFromJSON(string jsonString, JToken token)
        {
            _token = token; // save updated wire json
            ArenaConeJson json = null;
            try {
                json = JsonConvert.DeserializeObject<ArenaConeJson>(Regex.Unescape(jsonString));
            } catch (JsonReaderException e)
            {
                Debug.LogWarning($"{e.Message}: {jsonString}");
            }
            return json;
        }
    }
}
