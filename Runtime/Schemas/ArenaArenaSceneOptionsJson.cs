/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2023, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// Scene Config
    /// </summary>
    [Serializable]
    public class ArenaArenaSceneOptionsJson
    {
        [JsonIgnore]
        public readonly string componentName = "arena-scene-options";

        // arena-scene-options member-fields

        private static object defEnvPresets = JsonConvert.DeserializeObject("");
        [JsonProperty(PropertyName = "env-presets")]
        [Tooltip("A-Frame Environment presets. ")]
        public object EnvPresets = defEnvPresets;
        public bool ShouldSerializeEnvPresets()
        {
            return true; // required in json schema
        }

        private static object defRendererSettings = JsonConvert.DeserializeObject("");
        [JsonProperty(PropertyName = "renderer-settings")]
        [Tooltip("These settings are fed into three.js WebGLRenderer properties")]
        public object RendererSettings = defRendererSettings;
        public bool ShouldSerializeRendererSettings()
        {
            // renderer-settings
            return (RendererSettings != defRendererSettings);
        }

        private static object defSceneOptions = JsonConvert.DeserializeObject("");
        [JsonProperty(PropertyName = "scene-options")]
        [Tooltip("ARENA Scene Options")]
        public object SceneOptions = defSceneOptions;
        public bool ShouldSerializeSceneOptions()
        {
            return true; // required in json schema
        }

        private static object defPostProcessing = JsonConvert.DeserializeObject("");
        [JsonProperty(PropertyName = "post-processing")]
        [Tooltip("These effects are enabled in desktop and XR views")]
        public object PostProcessing = defPostProcessing;
        public bool ShouldSerializePostProcessing()
        {
            // post-processing
            return (PostProcessing != defPostProcessing);
        }

        // General json object management
        [OnError]
        internal void OnError(StreamingContext context, ErrorContext errorContext)
        {
            Debug.LogWarning($"{errorContext.Error.Message}: {errorContext.OriginalObject}");
            errorContext.Handled = true;
        }

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;
    }
}
